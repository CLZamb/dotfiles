" ~/.vim/sessions/Ruby_Generate_Plugin.vim:
" Vim session script.
" Created by session.vim 2.13.1 on 24 December 2018 at 06:45:03.
" Open this file in Vim and run :source % to restore your session.

if exists('g:syntax_on') != 1 | syntax on | endif
if exists('g:did_load_filetypes') != 1 | filetype on | endif
if exists('g:did_load_ftplugin') != 1 | filetype plugin on | endif
if exists('g:did_indent_on') != 1 | filetype indent on | endif
if &background != 'dark'
	set background=dark
endif
if !exists('g:colors_name') || g:colors_name != 'gruvbox' | colorscheme gruvbox | endif
call setqflist([])
let SessionLoad = 1
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
silent only
cd ~/Desktop/practice/vim-ruby-generate
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +2 ~/Desktop/practice/TODO_PLUGIN.txt
badd +12 autoload/generate/writers.vim
badd +15 autoload/generate/getter.vim
badd +6 autoload/generate/readers.vim
badd +27 autoload/generate/variables.vim
badd +87 autoload/general.vim
badd +8 autoload/generate/accessors.vim
badd +5 autoload/generate/setter.vim
badd +12 autoload/generate/method.vim
badd +15 autoload/generate/initialization.vim
badd +1 LICENSE
badd +1 ~/Desktop/practice/vim-ruby-generate
badd +1 ~/Desktop/practice/ruby/well_grounded_rubist/ex_20_private_protected_methods.rb
badd +1 ~/Desktop/practice/ruby/well_grounded_rubist/code/ch5/Listing5.9.rb
argglobal
silent! argdel *
$argadd ~/Desktop/practice/vim-ruby-generate
$argadd ~/Desktop/practice/ruby/well_grounded_rubist/ex_20_private_protected_methods.rb
$argadd ~/Desktop/practice/ruby/well_grounded_rubist/code/ch5/Listing5.9.rb
edit autoload/generate/initialization.vim
set splitbelow splitright
wincmd _ | wincmd |
vsplit
1wincmd h
wincmd w
set nosplitright
wincmd t
set winminheight=1 winminwidth=1 winheight=1 winwidth=1
exe 'vert 1resize ' . ((&columns * 90 + 90) / 181)
exe 'vert 2resize ' . ((&columns * 90 + 90) / 181)
argglobal
if bufexists('autoload/generate/initialization.vim') | buffer autoload/generate/initialization.vim | else | edit autoload/generate/initialization.vim | endif
setlocal fdm=indent
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=3
setlocal nofen
3
silent! normal! zo
5
silent! normal! zo
7
silent! normal! zo
21
silent! normal! zo
24
silent! normal! zo
33
silent! normal! zo
21
silent! normal! zo
24
silent! normal! zo
33
silent! normal! zo
let s:l = 15 - ((14 * winheight(0) + 20) / 41)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
15
normal! 056|
wincmd w
argglobal
if bufexists('autoload/generate/setter.vim') | buffer autoload/generate/setter.vim | else | edit autoload/generate/setter.vim | endif
setlocal fdm=indent
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=3
setlocal nofen
let s:l = 14 - ((13 * winheight(0) + 20) / 41)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
14
normal! 05|
wincmd w
exe 'vert 1resize ' . ((&columns * 90 + 90) / 181)
exe 'vert 2resize ' . ((&columns * 90 + 90) / 181)
tabnext 1
if exists('s:wipebuf') && getbufvar(s:wipebuf, '&buftype') isnot# 'terminal'
"   silent exe 'bwipe ' . s:wipebuf
endif
" unlet! s:wipebuf
set winheight=1 winwidth=20 winminheight=1 winminwidth=1 shortmess=filnxtToOFc
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &so = s:so_save | let &siso = s:siso_save

" Support for special windows like quick-fix and plug-in windows.
" Everything down here is generated by vim-session (not supported
" by :mksession out of the box).

1wincmd w
tabnext 1
if exists('s:wipebuf')
  if empty(bufname(s:wipebuf))
if !getbufvar(s:wipebuf, '&modified')
  let s:wipebuflines = getbufline(s:wipebuf, 1, '$')
  if len(s:wipebuflines) <= 1 && empty(get(s:wipebuflines, 0, ''))
    silent execute 'bwipeout' s:wipebuf
  endif
endif
  endif
endif
doautoall SessionLoadPost
unlet SessionLoad
" vim: ft=vim ro nowrap smc=128
